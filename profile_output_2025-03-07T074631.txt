Timer unit: 1e-09 s

Total time: 17.3305 s
File: /Users/daneladendorff/Desktop/adendorffy/acoustic-units/dist.py
Function: get_features_and_filenames at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                           @profile
    39                                           def get_features_and_filenames(sorted_paths):
    40         1       1000.0   1000.0      0.0      filenames = []
    41         1          0.0      0.0      0.0      features = []
    42     63138   89481000.0   1417.2      0.5      for path in tqdm(sorted_paths, desc="Appending Features"):
    43     63137  109847000.0   1739.8      0.6          filenames.append(path.stem)
    44     63137        2e+10 271203.7     98.8          feature = np.load(path)
    45     63137    8190000.0    129.7      0.0          features.append(feature)
    46         1       1000.0   1000.0      0.0      return features, filenames

Total time: 76.0268 s
File: /Users/daneladendorff/Desktop/adendorffy/acoustic-units/dist.py
Function: main at line 49

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    49                                           @profile
    50                                           def main():
    51                                               # Process chunks
    52         1          0.0      0.0      0.0      gamma = 0.1
    53         1 1200071000.0    1e+09      1.6      paths = list(Path(f"features/{gamma}").rglob("*.npy"))
    54                                           
    55         1   86921000.0    9e+07      0.1      sorted_paths = sorted(paths, key=lambda x: int(x.stem.split("_")[-1]))
    56         1          0.0      0.0      0.0      sample_size = len(sorted_paths)
    57                                           
    58         1        2e+10    2e+10     22.8      features, filenames = get_features_and_filenames(sorted_paths)
    59                                           
    60         1       6000.0   6000.0      0.0      num_pairs = sample_size * (sample_size - 1) // 2
    61                                           
    62         1      10000.0  10000.0      0.0      print(f"num_pairs: {num_pairs}")
    63         1       2000.0   2000.0      0.0      print(f"num_samples: {sample_size}")
    64                                           
    65                                               # Preallocate sparse matrix in LIL format (efficient for incremental additions)
    66         1   39412000.0    4e+07      0.1      dist_sparse = sp.lil_matrix((sample_size, sample_size), dtype=np.float32)
    67                                           
    68         1       5000.0   5000.0      0.0      pairs = pair_generator(sample_size)
    69                                               for i, j in tqdm(
    70         1     302000.0 302000.0      0.0          pairs, total=num_pairs, desc="Calculating Disatances", unit="Pair"
    71                                               ):
    72                                                   i, j, dist = cal_dist_per_pair(((i, j), (features[i], features[j])))
    73         2   24997000.0    1e+07      0.0          dist_sparse[i, j] = dist  # Fill the sparse matrix
    74         1       1000.0   1000.0      0.0          dist_sparse[j, i] = dist  # Symmetric distance
    75  29501801        6e+10   1942.5     75.4  
    76                                               # Convert to a compressed sparse format for efficient storage
    77                                               dist_sparse = dist_sparse.tocoo()
    78                                               np.savez_compressed(f"output/{gamma}/sparse_dist_mat.npz", dist_sparse)

 17.33 seconds - /Users/daneladendorff/Desktop/adendorffy/acoustic-units/dist.py:38 - get_features_and_filenames
 76.03 seconds - /Users/daneladendorff/Desktop/adendorffy/acoustic-units/dist.py:49 - main
